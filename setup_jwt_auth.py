#!/usr/bin/env python3
"""
Setup JWT Authentication for Direct Browser Access
Creates Cognito User Pool and configures AgentCore Runtime for JWT authentication
"""

import boto3
import json
import time

class JWTAuthSetup:
    def __init__(self):
        self.region = 'us-east-1'
        self.runtime_id = 'mental_health_support_agent-lRczXz8e6I'
        self.runtime_arn = 'arn:aws:bedrock-agentcore:us-east-1:681007183786:runtime/mental_health_support_agent-lRczXz8e6I'
        
        print("üîê SETTING UP JWT AUTHENTICATION FOR DIRECT BROWSER ACCESS")
        print("=" * 70)
        print("This will enable direct browser access to AgentCore Runtime")
        print("=" * 70)
    
    def step_1_create_cognito_user_pool(self):
        """Step 1: Create Cognito User Pool for JWT tokens"""
        print("\nüèóÔ∏è STEP 1: Creating Cognito User Pool")
        print("-" * 50)
        
        try:
            cognito_idp = boto3.client('cognito-idp', region_name=self.region)
            
            # Create User Pool
            print("1.1 Creating User Pool...")
            user_pool_response = cognito_idp.create_user_pool(
                PoolName='MentalHealthChatbotUserPool',
                Policies={
                    'PasswordPolicy': {
                        'MinimumLength': 8,
                        'RequireUppercase': False,
                        'RequireLowercase': False,
                        'RequireNumbers': False,
                        'RequireSymbols': False
                    }
                },
                AutoVerifiedAttributes=['email'],
                UsernameAttributes=['email'],
                Schema=[
                    {
                        'Name': 'email',
                        'AttributeDataType': 'String',
                        'Required': True,
                        'Mutable': True
                    }
                ]
            )
            
            user_pool_id = user_pool_response['UserPool']['Id']
            print(f"‚úÖ User Pool created: {user_pool_id}")
            
            # Create User Pool Client
            print("1.2 Creating User Pool Client...")
            client_response = cognito_idp.create_user_pool_client(
                UserPoolId=user_pool_id,
                ClientName='MentalHealthChatbotClient',
                GenerateSecret=False,  # No secret for browser clients
                ExplicitAuthFlows=[
                    'ALLOW_USER_PASSWORD_AUTH',
                    'ALLOW_REFRESH_TOKEN_AUTH',
                    'ALLOW_USER_SRP_AUTH'
                ],
                TokenValidityUnits={
                    'AccessToken': 'hours',
                    'IdToken': 'hours',
                    'RefreshToken': 'days'
                },
                AccessTokenValidity=24,  # 24 hours
                IdTokenValidity=24,      # 24 hours
                RefreshTokenValidity=30  # 30 days
            )\n            \n            client_id = client_response['UserPoolClient']['ClientId']\n            print(f\"‚úÖ User Pool Client created: {client_id}\")\n            \n            # Create discovery URL\n            discovery_url = f\"https://cognito-idp.{self.region}.amazonaws.com/{user_pool_id}/.well-known/openid-configuration\"\n            print(f\"‚úÖ Discovery URL: {discovery_url}\")\n            \n            # Create a test user\n            print(\"1.3 Creating test user...\")\n            try:\n                cognito_idp.admin_create_user(\n                    UserPoolId=user_pool_id,\n                    Username='testuser@example.com',\n                    TemporaryPassword='TempPass123!',\n                    MessageAction='SUPPRESS'\n                )\n                \n                # Set permanent password\n                cognito_idp.admin_set_user_password(\n                    UserPoolId=user_pool_id,\n                    Username='testuser@example.com',\n                    Password='MentalHealth123!',\n                    Permanent=True\n                )\n                \n                print(\"‚úÖ Test user created: testuser@example.com / MentalHealth123!\")\n                \n            except Exception as e:\n                if 'UsernameExistsException' in str(e):\n                    print(\"‚úÖ Test user already exists\")\n                else:\n                    print(f\"‚ö†Ô∏è Test user creation failed: {str(e)}\")\n            \n            self.user_pool_id = user_pool_id\n            self.client_id = client_id\n            self.discovery_url = discovery_url\n            \n            return True\n            \n        except Exception as e:\n            print(f\"‚ùå Cognito User Pool creation failed: {str(e)}\")\n            return False\n    \n    def step_2_update_agentcore_runtime(self):\n        \"\"\"Step 2: Update AgentCore Runtime for JWT authentication\"\"\"\n        print(\"\\nü§ñ STEP 2: Updating AgentCore Runtime for JWT Authentication\")\n        print(\"-\" * 50)\n        \n        try:\n            agentcore_control = boto3.client('bedrock-agentcore-control', region_name=self.region)\n            \n            print(\"2.1 Getting current runtime configuration...\")\n            current_runtime = agentcore_control.get_agent_runtime(\n                agentRuntimeId=self.runtime_id\n            )\n            \n            print(f\"‚úÖ Current runtime status: {current_runtime['status']}\")\n            \n            print(\"2.2 Updating runtime with JWT authorizer...\")\n            \n            # Update the runtime with JWT authorizer configuration\n            update_response = agentcore_control.update_agent_runtime(\n                agentRuntimeId=self.runtime_id,\n                authorizerConfiguration={\n                    'customJWTAuthorizer': {\n                        'discoveryUrl': self.discovery_url,\n                        'allowedClients': [self.client_id]\n                    }\n                }\n            )\n            \n            print(\"‚úÖ AgentCore Runtime updated with JWT authorizer\")\n            print(f\"   Discovery URL: {self.discovery_url}\")\n            print(f\"   Allowed Client: {self.client_id}\")\n            \n            # Wait for update to complete\n            print(\"2.3 Waiting for runtime update to complete...\")\n            for i in range(30):  # Wait up to 5 minutes\n                time.sleep(10)\n                runtime_status = agentcore_control.get_agent_runtime(\n                    agentRuntimeId=self.runtime_id\n                )\n                \n                status = runtime_status['status']\n                print(f\"   Status: {status} ({i+1}/30)\")\n                \n                if status == 'READY':\n                    print(\"‚úÖ Runtime update completed successfully\")\n                    break\n                elif status == 'FAILED':\n                    print(\"‚ùå Runtime update failed\")\n                    return False\n            else:\n                print(\"‚ö†Ô∏è Runtime update taking longer than expected\")\n            \n            return True\n            \n        except Exception as e:\n            print(f\"‚ùå AgentCore Runtime update failed: {str(e)}\")\n            return False\n    \n    def step_3_test_jwt_authentication(self):\n        \"\"\"Step 3: Test JWT authentication\"\"\"\n        print(\"\\nüß™ STEP 3: Testing JWT Authentication\")\n        print(\"-\" * 50)\n        \n        try:\n            cognito_idp = boto3.client('cognito-idp', region_name=self.region)\n            \n            print(\"3.1 Getting JWT token for test user...\")\n            \n            # Authenticate and get JWT token\n            auth_response = cognito_idp.initiate_auth(\n                ClientId=self.client_id,\n                AuthFlow='USER_PASSWORD_AUTH',\n                AuthParameters={\n                    'USERNAME': 'testuser@example.com',\n                    'PASSWORD': 'MentalHealth123!'\n                }\n            )\n            \n            access_token = auth_response['AuthenticationResult']['AccessToken']\n            print(f\"‚úÖ JWT Access Token obtained: {access_token[:50]}...\")\n            \n            print(\"3.2 Testing AgentCore Runtime call with JWT token...\")\n            \n            import requests\n            import urllib.parse\n            \n            # URL encode the agent ARN\n            escaped_agent_arn = urllib.parse.quote(self.runtime_arn, safe='')\n            \n            # Construct the URL\n            url = f\"https://bedrock-agentcore.{self.region}.amazonaws.com/runtimes/{escaped_agent_arn}/invocations\"\n            \n            # Set up headers\n            headers = {\n                \"Authorization\": f\"Bearer {access_token}\",\n                \"Content-Type\": \"application/json\",\n                \"X-Amzn-Bedrock-AgentCore-Runtime-Session-Id\": \"jwt_test_session_123\"\n            }\n            \n            # Test payload\n            payload = {\n                \"input\": \"Hello, I need help with anxiety. Can you support me?\",\n                \"sessionId\": \"jwt_test_session_123\",\n                \"actorId\": \"jwt_test_user\",\n                \"context\": []\n            }\n            \n            print(f\"   URL: {url}\")\n            print(f\"   Payload: {payload['input']}\")\n            \n            # Make the request\n            response = requests.post(\n                url,\n                headers=headers,\n                json=payload,\n                timeout=30\n            )\n            \n            print(f\"‚úÖ Response Status: {response.status_code}\")\n            \n            if response.status_code == 200:\n                response_data = response.json()\n                agent_response = response_data.get('response', 'No response')\n                print(f\"‚úÖ Agent Response: {agent_response[:100]}...\")\n                print(\"üéâ JWT Authentication working successfully!\")\n                \n                self.jwt_token = access_token\n                return True\n            else:\n                print(f\"‚ùå Request failed: {response.status_code}\")\n                print(f\"   Error: {response.text}\")\n                return False\n            \n        except Exception as e:\n            print(f\"‚ùå JWT authentication test failed: {str(e)}\")\n            return False\n    \n    def step_4_generate_browser_code(self):\n        \"\"\"Step 4: Generate updated browser code for JWT authentication\"\"\"\n        print(\"\\nüì± STEP 4: Generating Browser Code for JWT Authentication\")\n        print(\"-\" * 50)\n        \n        browser_code = f'''\n// Updated AgentCore Direct Integration with JWT Authentication\nclass JWTAgentCoreChatbot {{\n    constructor() {{\n        this.sessionId = this.generateSessionId();\n        this.userId = this.getUserId();\n        this.isConnected = false;\n        this.messageHistory = [];\n        this.jwtToken = null;\n        \n        // JWT Configuration\n        this.config = {{\n            region: '{self.region}',\n            runtimeArn: '{self.runtime_arn}',\n            memoryId: 'MentalHealthChatbotMemory-GqmjCf2KIw',\n            userPoolId: '{self.user_pool_id}',\n            clientId: '{self.client_id}',\n            discoveryUrl: '{self.discovery_url}'\n        }};\n        \n        this.initializeEventListeners();\n        this.initializeJWTAuth();\n    }}\n    \n    async initializeJWTAuth() {{\n        try {{\n            // For demo purposes, use the test user credentials\n            // In production, implement proper login flow\n            await this.authenticateUser('testuser@example.com', 'MentalHealth123!');\n            this.updateStatus('online', 'Connected with JWT Authentication');\n            this.isConnected = true;\n        }} catch (error) {{\n            console.error('JWT authentication failed:', error);\n            this.updateStatus('error', 'Authentication Failed');\n        }}\n    }}\n    \n    async authenticateUser(username, password) {{\n        // This would typically be done through a proper login form\n        // For demo purposes, we're using direct authentication\n        \n        const authData = {{\n            ClientId: this.config.clientId,\n            AuthFlow: 'USER_PASSWORD_AUTH',\n            AuthParameters: {{\n                USERNAME: username,\n                PASSWORD: password\n            }}\n        }};\n        \n        // In a real implementation, you'd call Cognito through AWS SDK\n        // For now, we'll use the token from the test\n        this.jwtToken = '{self.jwt_token if hasattr(self, \"jwt_token\") else \"YOUR_JWT_TOKEN_HERE\"}';\n        \n        console.log('‚úÖ JWT token obtained');\n    }}\n    \n    async callAgentCoreRuntime(message, context) {{\n        try {{\n            console.log('ü§ñ Calling AgentCore Runtime with JWT...');\n            \n            const payload = {{\n                input: message,\n                sessionId: this.sessionId,\n                actorId: this.userId,\n                context: context\n            }};\n            \n            const url = `https://bedrock-agentcore.${{this.config.region}}.amazonaws.com/runtimes/${{encodeURIComponent(this.config.runtimeArn)}}/invocations`;\n            \n            const response = await fetch(url, {{\n                method: 'POST',\n                headers: {{\n                    'Authorization': `Bearer ${{this.jwtToken}}`,\n                    'Content-Type': 'application/json',\n                    'X-Amzn-Bedrock-AgentCore-Runtime-Session-Id': this.sessionId\n                }},\n                body: JSON.stringify(payload)\n            }});\n            \n            if (response.ok) {{\n                const result = await response.json();\n                console.log('‚úÖ AgentCore Runtime responded successfully');\n                \n                return {{\n                    response: result.response || 'I\\'m here to support you.',\n                    sessionId: this.sessionId,\n                    status: 'success'\n                }};\n            }} else {{\n                throw new Error(`HTTP ${{response.status}}: ${{await response.text()}}`);\n            }}\n            \n        }} catch (error) {{\n            console.error('AgentCore Runtime call failed:', error);\n            throw error;\n        }}\n    }}\n    \n    // ... rest of the chatbot methods remain the same ...\n}}\n\n// Initialize the JWT-enabled chatbot\ndocument.addEventListener('DOMContentLoaded', () => {{\n    new JWTAgentCoreChatbot();\n}});\n'''\n        \n        print(\"‚úÖ Browser code generated with JWT authentication\")\n        print(\"\\nüìã CONFIGURATION SUMMARY:\")\n        print(f\"   User Pool ID: {self.user_pool_id}\")\n        print(f\"   Client ID: {self.client_id}\")\n        print(f\"   Discovery URL: {self.discovery_url}\")\n        print(f\"   Test User: testuser@example.com / MentalHealth123!\")\n        \n        # Save the browser code\n        with open('/Users/vibhup/mental-health-agent/chatbot-ui/jwt-agentcore-direct.js', 'w') as f:\n            f.write(browser_code)\n        \n        print(\"‚úÖ Browser code saved to: jwt-agentcore-direct.js\")\n        \n        return True\n    \n    def run_complete_setup(self):\n        \"\"\"Run complete JWT authentication setup\"\"\"\n        print(\"üöÄ STARTING JWT AUTHENTICATION SETUP\")\n        print(\"=\" * 70)\n        \n        steps = [\n            (\"Create Cognito User Pool\", self.step_1_create_cognito_user_pool),\n            (\"Update AgentCore Runtime\", self.step_2_update_agentcore_runtime),\n            (\"Test JWT Authentication\", self.step_3_test_jwt_authentication),\n            (\"Generate Browser Code\", self.step_4_generate_browser_code)\n        ]\n        \n        results = {}\n        \n        for step_name, step_func in steps:\n            results[step_name] = step_func()\n            if not results[step_name]:\n                print(f\"\\n‚ùå Setup failed at: {step_name}\")\n                break\n        \n        # Final summary\n        print(\"\\n\" + \"=\" * 70)\n        print(\"üèÜ JWT AUTHENTICATION SETUP RESULTS\")\n        print(\"=\" * 70)\n        \n        passed = sum(results.values())\n        total = len(results)\n        \n        for step_name, result in results.items():\n            status = \"‚úÖ PASS\" if result else \"‚ùå FAIL\"\n            print(f\"{step_name}: {status}\")\n        \n        if passed == total:\n            print(\"\\nüéâ JWT AUTHENTICATION SETUP COMPLETE!\")\n            print(\"‚úÖ AgentCore Runtime now supports direct browser access\")\n            print(\"‚úÖ Users can authenticate with JWT tokens\")\n            print(\"‚úÖ No Lambda proxy needed\")\n            print(\"\\nüåê NEXT STEPS:\")\n            print(\"1. Update your website to use jwt-agentcore-direct.js\")\n            print(\"2. Implement proper login form for users\")\n            print(\"3. Test the direct browser access\")\n            print(\"\\nüîê CONNECTION ERROR SHOULD BE RESOLVED!\")\n        else:\n            print(\"\\n‚ö†Ô∏è SETUP INCOMPLETE\")\n            print(\"Some steps failed - check the logs above\")\n        \n        return results\n\n\ndef main():\n    \"\"\"Main setup execution\"\"\"\n    setup = JWTAuthSetup()\n    results = setup.run_complete_setup()\n    \n    print(\"\\n\" + \"=\" * 70)\n    print(\"üìã FINAL SUMMARY\")\n    print(\"=\" * 70)\n    print(\"This setup enables direct browser access to AgentCore Runtime\")\n    print(\"using JWT Bearer Token authentication instead of IAM SigV4.\")\n    print(\"\\nUsers will authenticate with Cognito User Pool and receive\")\n    print(\"JWT tokens that can be used directly from the browser.\")\n    print(\"\\nThis eliminates the need for Lambda proxies and enables\")\n    print(\"true direct AgentCore integration from web browsers.\")\n\n\nif __name__ == \"__main__\":\n    main()
